I"<h2 id="关于spfa">关于spfa</h2>

<p><strong>spfa伪代码：</strong></p>

<pre><code class="language-cpp">void spfa(s){
    最短路数组全部设为无限大;
    队列 q;
    起点s入队;
    s离s的距离设为零;
    while(队列非空){
        取出队首;弹出队首;
        for(int i=0;i&lt;u的出度;i++){
            v=第i个终点;
            w=到v的权值;
            if(到u点的最短路+w&lt;目前到v点的最短路){//松弛
                更新目前到v点的最短路;
                v入队;
            }
        }
    } 
}
</code></pre>

<h2 id="p3371-单源最短路径弱化版">P3371 单源最短路径（弱化版）</h2>

<h3 id="题目描述">题目描述：</h3>

<p>如题，给出一个有向图，请输出从某一点出发到所有点的最短路径长度。</p>

<h3 id="输入输出格式">输入输出格式：</h3>

<p><strong>输入格式：</strong></p>

<p>第一行包含三个整数N、M、S，分别表示点的个数、有向边的个数、出发点的编号。</p>

<p>接下来M行每行包含三个整数Fi、Gi、Wi，分别表示第i条有向边的出发点、目标点和长度。</p>

<p><strong>输出格式：</strong></p>

<p>一行，包含N个用空格分隔的整数，其中第i个整数表示从点S出发到点i的最短路径长度（若S=i则最短路径长度为0，若从点S无法到达点i，则最短路径长度为2147483647）</p>

<h4 id="样例">样例：</h4>

<p><strong>输入：</strong></p>

<pre><code>4 6 1
1 2 2
2 3 2
2 4 1
1 3 5
3 4 3
1 4 4
</code></pre>

<p><strong>输出：</strong></p>

<pre><code>0 2 4 3
</code></pre>

<h3 id="代码">代码：</h3>

<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cmath&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
#include&lt;cstdio&gt;
#include&lt;cstdlib&gt;
#include&lt;stack&gt;
#include&lt;queue&gt;
#include&lt;vector&gt;
using namespace std;
const int NR=100000;
int d[NR]/*最短路径存储列表*/,n,m,s;
vector&lt; pair&lt;int,int&gt; &gt; adj[NR];//一个结构体队列
void spfa(int s){//spfa函数
    memset(d,0x3f,sizeof(d));
    queue&lt;int&gt; q;
    q.push(s);d[s]=0;
    while(!q.empty()){
        int u=q.front();q.pop();
        for(int i=0;i&lt;adj[u].size();i++){
            int v=adj[u][i].first;
            int w=adj[u][i].second;
            if(d[u]+w&lt;d[v]){
                d[v]=d[u]+w;
                q.push(v);
            }
        }
    } 
}
int main()
{
    scanf("%d%d%d",&amp;n,&amp;m,&amp;s);
    for(int i=0;i&lt;m;i++){
        int st,en,w;
        scanf("%d%d%d",&amp;st,&amp;en,&amp;w);
        adj[st].push_back(make_pair(en,w));
    }
    spfa(s);
    for(int i=1;i&lt;=n;i++){//输出
        if(d[i]&gt;=1e9)printf("2147483647 ");
        else printf("%d ",d[i]);
    }
    return 0;
}
</code></pre>
:ET