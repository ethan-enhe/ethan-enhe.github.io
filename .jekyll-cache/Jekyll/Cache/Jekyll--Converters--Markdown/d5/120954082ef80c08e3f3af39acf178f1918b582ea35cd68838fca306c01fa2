I"d<h2 id="sp1296-sumfour---4-values-whose-sum-is-0二分搜索"><a href="https://www.luogu.org/problemnew/show/SP1296">SP1296 SUMFOUR - 4 values whose sum is 0</a>（二分搜索）</h2>

<h3 id="思路">思路</h3>

<p>这题的数据量显然不能暴力枚举的（\(O(n^4)=O(4000^4)\)）</p>

<p>其实我们可以将四个数列中前两个数列中的数按不同排列两两加起来存进数组，后两个数列中的数按也不同排列两两加起来存进数组（其实不必要，本人脑子一时“抽搐”来着）。再遍历第一个数组中的每一个数，再从第二个数组中二分查找出一个与前一个数的和为0的数。</p>

<p>然鹅这题有一个坑——数列中可能有相同的数字。相信你能想出怎么处理这种情况。</p>

<h3 id="代码">代码</h3>

<pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int NR=4005;
const int MAXN=16000005;
int n,t=0,cnt=0,lf,rt,arr[4][NR],tb[2][MAXN];
inline int l_b(int l,int r,int k,int arr[]){
    int m;
    while(l&lt;r){
        m=(l+r)&gt;&gt;1;
        if(arr[m]&lt;k)l=m+1;
        else r=m;
    }
    return (arr[l]==k?l:-1);
}
int main(){
    scanf("%d",&amp;n);
    for(int i=0;i&lt;n;i++)
        scanf("%d%d%d%d",&amp;arr[0][i],&amp;arr[1][i],&amp;arr[2][i],&amp;arr[3][i]);
    for(int i=0;i&lt;n;i++)
        for(int j=0;j&lt;n;j++)
            tb[0][t++]=arr[0][i]+arr[1][j];
    sort(tb[0],tb[0]+t);
    t=0;
    for(int i=0;i&lt;n;i++)
        for(int j=0;j&lt;n;j++)
            tb[1][t++]=arr[2][i]+arr[3][j];
    sort(tb[1],tb[1]+t);
    for(int i=0;i&lt;t;i++){
        lf=l_b(0,t-1,-tb[0][i],tb[1]);
        if(lf!=-1){
            int k=lf;
            while(tb[1][k]==-tb[0][i] &amp;&amp; k&lt;t)
                k++;
            cnt+=k-lf;
        }
    }
    printf("%d",cnt);
    return 0;
}
</code></pre>

<h2 id="sp733-mtwalk---mountain-walking"><a href="https://www.luogu.org/problemnew/show/SP733">SP733 MTWALK - Mountain Walking</a></h2>

<p>这题我一开始莫名其妙地错了，后来乱改一通却又莫名其妙的对了~【手动滑稽】</p>

<h3 id="思路-1">思路</h3>

<p><del>如果你决定暴搜的话，那么我就只能跟你说一声「珍重再见」了。</del></p>

<p>标题大法好，看到这一章内容的标题赫然写着“二分”二字，显然就是该用二分答案做滴。</p>

<p>这题的二分答案，即二分出这个山峰的高度差，然而二分之后却又怎么写\(check\)函数呢？显然，我们还需要枚举路线中最低山峰的高度，计算出最高山峰=最低山峰+高度差，然后再开始\(dfs\)，而且\(dfs​\)中要求所有路线上的山峰高度大于等于最低山峰高度，小于等于最高山峰高度。</p>

<h3 id="代码-1">代码</h3>

<pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
using namespace std;
const int NR=105;
const int wk[4][2]={
	{0,1},
	{1,0},
	{-1,0},
	{0,-1}};
int n,l,r,m,MX=-1,arr[NR][NR];
bool vis[NR][NR];
void dfs(int mn,int mx,int x,int y){
    if(x&gt;n || x&lt;1 || y&gt;n || y&lt;1)return;
    if(vis[x][y])return;
    if(arr[x][y]&lt;mn || arr[x][y]&gt;mx)return;
    vis[x][y]=1;
    for(int i=0;i&lt;4;i++)
        dfs(mn,mx,x+wk[i][0],y+wk[i][1]);
}
inline bool check(int d){
    for(int i=max(vis[1][1]-d,0);i&lt;=min(110,arr[1][1]+d);i++){
        memset(vis,0,sizeof(vis));
        dfs(i,i+d,1,1);
        if(vis[n][n])return 1;
    }
    return 0;
}
int main(){
    scanf("%d",&amp;n);
    for(int i=1;i&lt;=n;i++)
        for(int j=1;j&lt;=n;j++)
            scanf("%d",&amp;arr[i][j]);
    l=0;r=110;
    while(l&lt;r){
        m=(l+r)&gt;&gt;1;
        if(check(m))r=m;
        else l=m+1;
    }
    printf("%d\n",l);
    return 0;
}
</code></pre>

<h2 id="总结">总结</h2>

<ul>
  <li>要提升代码能力+打字速度</li>
  <li>查错能力</li>
</ul>
:ET